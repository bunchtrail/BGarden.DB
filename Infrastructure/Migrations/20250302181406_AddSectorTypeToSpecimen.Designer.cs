// <auto-generated />
using System;
using BGarden.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BotanicalContext))]
    [Migration("20250302181406_AddSectorTypeToSpecimen")]
    partial class AddSectorTypeToSpecimen
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BGarden.Domain.Entities.Biometry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("FlowerDiameter")
                        .HasColumnType("real");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecimenId");

                    b.ToTable("Biometries");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Exposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Expositions");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Phenology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FloweringEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FloweringStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FruitingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecimenId");

                    b.ToTable("Phenologies");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Specimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConservationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Cultivar")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DeterminedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DuplicatesInfo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EcologyAndBiology")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("EconomicUse")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("ExpositionId")
                        .HasColumnType("integer");

                    b.Property<int>("FamilyId")
                        .HasColumnType("integer");

                    b.Property<string>("FilledBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Form")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Genus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("HasHerbarium")
                        .HasColumnType("boolean");

                    b.Property<string>("Illustration")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("InventoryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LatinName")
                        .HasColumnType("text");

                    b.Property<string>("NaturalRange")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("OriginalBreeder")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("OriginalYear")
                        .HasColumnType("integer");

                    b.Property<int?>("PlantingYear")
                        .HasColumnType("integer");

                    b.Property<string>("RussianName")
                        .HasColumnType("text");

                    b.Property<string>("SampleOrigin")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("SectorType")
                        .HasColumnType("integer");

                    b.Property<string>("Species")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Synonyms")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("ExpositionId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("InventoryNumber")
                        .IsUnique();

                    b.ToTable("Specimens");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Biometry", b =>
                {
                    b.HasOne("BGarden.Domain.Entities.Specimen", "Specimen")
                        .WithMany("Biometries")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Phenology", b =>
                {
                    b.HasOne("BGarden.Domain.Entities.Specimen", "Specimen")
                        .WithMany("Phenologies")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Specimen", b =>
                {
                    b.HasOne("BGarden.Domain.Entities.Exposition", "Exposition")
                        .WithMany("Specimens")
                        .HasForeignKey("ExpositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BGarden.Domain.Entities.Family", "Family")
                        .WithMany("Specimens")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exposition");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Exposition", b =>
                {
                    b.Navigation("Specimens");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Family", b =>
                {
                    b.Navigation("Specimens");
                });

            modelBuilder.Entity("BGarden.Domain.Entities.Specimen", b =>
                {
                    b.Navigation("Biometries");

                    b.Navigation("Phenologies");
                });
#pragma warning restore 612, 618
        }
    }
}
